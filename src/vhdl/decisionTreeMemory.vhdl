library IEEE;
library STD;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.ALL;
use IEEE.std_logic_textio.all;
use STD.textio.all;



-- 2-dimensional array used to store all information needed for all the decision trees in the random forest.
-- function InitRamFromFile below is used to read data stream from .data file generated by the python code (in Github)
-- and store the data stream in the array. there are a total of 10 data chunks within the .data file
-- each one of the 10 data chunks can hold 1-15 20-bit data streams each representing information of a node.

entity DecisionTreeMemory is
    port(
        tree_num    : in  integer;
        currentNode : in  std_logic_vector;
        allinf      : out std_logic_vector(19 downto 0)
    );
end DecisionTreeMemory;



architecture arch of DecisionTreeMemory is

    type mem is array(0 to 9, 0 to 14) of std_logic_vector(19 downto 0);
    
    impure function InitRamFromFile (fileName : in string) return mem is
        file RamFile         : text open read_mode is fileName;
        variable RamFileLine : line;
        variable RAM         : mem;
    begin
        L1 : for i in 0 to 9 loop
            L2 : for j in 0 to 14 loop
                readline(RamFile, RamFileLine);
                if RamFileLine'length < 4 then
                    exit L2;
                else
                    read(RamFileLine, RAM(i,j));
                end if;
            end loop;
        end loop;
        return RAM;
   end function;

   -- function InitRamFromFile called and the return value stored in signal RAM
   signal RAM : mem := InitRamFromFile("../../res/forest.dat");
begin
    -- data stream of each node is fetched.
    allinf <= RAM(tree_num, to_integer(unsigned(currentNode)));

end arch;
